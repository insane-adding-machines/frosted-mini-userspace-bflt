#!/usr/bin/python

f = open("apps.mk")
m = open("Makefile", "w+")
ib = open("icebox.c", "w+")

# Static headers for generated files
ib.write("/* This file is automatically generated.\n")
ib.write(" * DO NOT EDIT!\n")
ib.write(" * ============\n")
ib.write(" * To add an application, use apps.mk, then re-run gen_makefile.py\n")
ib.write(" */\n")
ib.write("\n")
ib.write("\n")
ib.write("\n")
ib.write("#include <string.h>\n")
ib.write("#include <stdio.h>\n")
ib.write("\n")
ib.write("int main(int argc, char *argv[])\n")
ib.write("{\n")
ib.write("\n")

m.write("# This file is automatically generated.\n")
m.write("# DO NOT EDIT!\n")
m.write("# ============\n")
m.write("# To add an application, use apps.mk, then re-run gen_makefile.py\n")
m.write("\n")
m.write("\n")
m.write("\n")
m.write("\n")
m.write("-include ../kconfig/.config\n")
m.write("CC?=arm-frosted-eabi-cc\n")

additional_targets=[]
while True:
    l = f.readline()
    ice=False
    if not l:
        break


    name = l.split(":")[0]
    modules = l.split(":")[1].rstrip(" ICE\n")



    for mn in modules.split(" "):
        if mn != "" and mn != name+".o":
            additional_targets.append("\n")
            additional_targets.append("../out/"+name+": "+modules+"\n")
            additional_targets.append("\t@arm-frosted-eabi-gcc -o $@ $^ $(CFLAGS) $(CFLAGS-y) $(LDFLAGS)\n")
            additional_targets.append("\n")
            break


    NAME=name.upper()
    m.write("APPS-$(APP_"+NAME+")+="+name+"\n")
    m.write("CFLAGS-$(APP_"+NAME+")+=-DAPP_"+NAME+"_STANDALONE\n")
    m.write("CFLAGS-ICEBOX-$(APP_"+NAME+")+=-DAPP_"+NAME+"_MODULE\n")
    m.write("\n")
    
    if "ICE" in l:
        ib.write('\n')
        ib.write('#ifdef APP_'+NAME+'_MODULE\n')
        ib.write('    extern int icebox_'+name+'(int argc, char *argv[]);\n')
        ib.write('    if(strcmp("'+name+'", argv[0]) == 0)\n')
        ib.write('        return icebox_'+name+'(argc, argv);\n')
        ib.write('#endif\n')


m.write("BIN:=$(patsubst %,../out/%,$(APPS-y))\n")
m.write("LNK:=$(patsubst %,../lnk/%,$(APPS-m))\n")
m.write("OBJ:=$(patsubst %,%.o,$(APPS-y))\n")
m.write("MOD:=$(patsubst %,ice/%.o,$(APPS-m))\n")
m.write("ICE-$(ICEBOX)=../out/icebox\n")
m.write("\n")
m.write("all: $(BIN) $(MOD) $(LNK) $(ICE-y) $(LNK)\n")
m.write("\n")
m.write("../out/icebox: icebox.o $(MOD)\n")
m.write("\tarm-frosted-eabi-gcc -o $@ $^ $(CFLAGS) $(CFLAGS-ICEBOX-m) $(LDFLAGS)\n");
m.write("icebox.o: icebox.c\n")
m.write("\tarm-frosted-eabi-gcc -c -o $@ $^ $(CFLAGS) $(CFLAGS-ICEBOX-m)\n");

for l in additional_targets:
    m.write(l)

m.write("\n")
m.write("\n")
m.write("../lnk/%: ../out/icebox\n")
m.write("\tln -s $^ $@\n")

m.write("ice/%.o: %.c\n")
m.write("\tmkdir -p ice\n")
m.write("\tarm-frosted-eabi-gcc -c -o $@ $^ $(CFLAGS) $(CFLAGS-y)\n")
m.write("\n")
m.write("%.o: %.c\n")
m.write("\tarm-frosted-eabi-gcc -c -o $@ $^ $(CFLAGS) $(CFLAGS-y)\n")
m.write("\n")
m.write("../out/%: %.o\n")
m.write("\tarm-frosted-eabi-gcc -o $@ $^ $(CFLAGS) $(CFLAGS-y) $(LDFLAGS)\n");
m.write("\n")
m.write("clean:\n")
m.write("\t@rm -f icebox.o\n")
m.write("\t@rm -rf out\n")
m.write("\t@rm -f $(OBJ)\n")
m.write("\t@rm -rf ice\n")
ib.write('\n')
ib.write('    fprintf(stderr,"%s: command not implemented.\\r\\n", argv[0]);\n')
ib.write('    return 255;\n')
ib.write("}\n")
